{"version":3,"file":"static/js/829.01ff8266.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/fields.js","components/LoginForm/initialState.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/hooks/useForm.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","shared/utils/TextField/TextField.styled.js","shared/utils/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  padding: 20px;\n`;\n","export const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n","export const initialState = {\n  email: '',\n  password: '',\n};\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '../../shared/utils/TextField/TextField';\nimport { Button } from '../../shared/utils/Button/Button';\nimport { Form } from './LoginForm.styled';\n\nimport { useForm } from '../../shared/hooks/useForm';\nimport { login } from '../../redux/auth/authOperations';\n\nimport { fields } from './fields';\nimport { initialState } from './initialState';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const onSubmit = data => {\n    dispatch(login(data));\n  };\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Login</Button>\n    </Form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authOperations';\n\nimport { LoginForm } from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const handleLogin = data => {\n    dispatch(login(data));\n  };\n\n  return (\n    <div>\n      <LoginForm onSubmit={handleLogin} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import { useState, useCallback } from 'react';\n\nexport const useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 120px 1fr;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 15px;\n`;\n\nexport const Field = styled.input`\n  padding: 10px;\n  border: 1px solid;\n  border-radius: 5px;\n`;\n","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { Field, Wrapper } from './TextField.styled';\n\nexport const TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <Wrapper>\n      <label htmlFor={id}>{label}</label>\n      <Field id={id} onChange={handleChange} {...props} />\n    </Wrapper>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Form","styled","fields","type","name","required","label","placeholder","initialState","email","password","LoginForm","dispatch","useDispatch","useForm","onSubmit","data","login","state","handleChange","handleSubmit","TextField","value","Button","useState","setState","useCallback","target","prevState","e","preventDefault","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","Wrapper","Field","props","id","useMemo","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","onChange"],"sourceRoot":""}