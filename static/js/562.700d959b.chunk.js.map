{"version":3,"file":"static/js/562.700d959b.chunk.js","mappings":"uOAGaA,EAAQC,EAAAA,GAAAA,MAAH,kFAMLC,GAAQD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,+GAOLG,GAAWH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,0I,8BChBRK,EAAiB,SAAC,GAAD,SAAGC,SAAwBC,KAA3B,EAEjBC,EAAyB,SAAC,GAA0B,IAAxBF,EAAuB,EAAvBA,SAAUG,EAAa,EAAbA,OACjD,IAAKA,EACH,OAAOH,EAASC,MAGlB,IAAMG,EAAmBD,EAAOE,cAKhC,OAJeL,EAASC,MAAME,QAAO,YACnC,OADiD,EAAXG,KAC1BD,cAAcE,SAASH,EACpC,GAGF,E,SCLKI,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,KAAMG,EAAAA,KAEHE,IAAI,GACJC,IAAI,IACJC,QACC,yHACA,0IAEDC,SAAS,6BACZC,OAAQN,EAAAA,KAELE,IAAI,GACJC,IAAI,IACJC,QACC,6EACA,gGAEDC,SAAS,iCAGDE,EAAc,WACzB,IAKMhB,GAAWiB,EAAAA,EAAAA,IAAYlB,GACvBmB,GAAWC,EAAAA,EAAAA,MAajB,OACE,+BACE,SAAC,KAAD,CACEC,cAtBgB,CACpBd,KAAM,GACNS,OAAQ,IAqBJM,iBAAkBb,EAClBc,SAhBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACTxB,EAASyB,MAAK,SAAAC,GAGjC,OAFkBA,EAAQpB,KAAKD,gBACfkB,EAAOjB,KAAKD,aAE7B,IACiBsB,MAAM,GAAD,OAAIJ,EAAOjB,KAAX,6BAClBY,GAASU,EAAAA,EAAAA,IAAgBL,IAC9BC,GACD,EAIG,UAKE,UAAC,KAAD,CAAMK,aAAa,MAAnB,WACE,UAACpC,EAAD,mBAEE,SAACE,EAAD,CAAOmC,KAAK,OAAOxB,KAAK,aAE1B,SAACT,EAAD,CAAUkC,UAAU,OAAOzB,KAAK,UAChC,UAACb,EAAD,qBAEE,SAACE,EAAD,CAAOmC,KAAK,MAAMxB,KAAK,eAEzB,SAACT,EAAD,CAAUkC,UAAU,OAAOzB,KAAK,YAChC,SAAC0B,EAAA,EAAD,gCAKT,E,UCxEYC,EAAe,SAAC,GAAD,SAAG9B,MAAH,ECIf+B,EAAS,WACpB,IAAM/B,GAASc,EAAAA,EAAAA,IAAYgB,GACrBf,GAAWC,EAAAA,EAAAA,MAMjB,OACE,8BACE,qCADF,0BAEwB,kBAAOgB,MAAOhC,EAAQiC,SAP3B,SAAAC,GACnBnB,GAASoB,EAAAA,EAAAA,GAAUD,EAAEE,OAAOJ,OAC7B,MAQF,EChBYK,EAAW9C,EAAAA,GAAAA,GAAH,+C,UCQR+C,EAAc,WACzB,IAAMvB,GAAWC,EAAAA,EAAAA,OAEjBuB,EAAAA,EAAAA,YAAU,WACRxB,GAASyB,EAAAA,EAAAA,MACV,GAAE,CAACzB,IAEJ,IAAM0B,GAAO3B,EAAAA,EAAAA,IAAYf,GACnB2C,EAAaC,QAAQF,EAAKG,QAKhC,OACE,2BACGF,IACC,wBACGD,EAAKI,KAAI,gBAAGC,EAAH,EAAGA,GAAI3C,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAb,OACR,UAACyB,EAAD,WACGlC,EADH,KACWS,GACT,SAACiB,EAAA,EAAD,CAAQkB,QAAS,kBAVL,SAAAD,GACtB/B,GAASiC,EAAAA,EAAAA,IAAmBF,GAC7B,CAQkCG,CAAgBH,EAAtB,EAAjB,sBAFaA,EADP,OAQZJ,IAAc,mDAGrB,ECxBD,EAVqB,WACnB,OACE,4BACE,SAAC7B,EAAD,KACA,SAACkB,EAAD,KACA,SAACO,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  display: block;\n  width: 300px;\n  margin-bottom: 10px;\n`;\n\nexport const Emessage = styled(ErrorMessage)`\n  width: 300%;\n  padding: 4px;\n  display: block;\n  font-size: 12px;\n  box-sizing: border-box;\n  color: red;\n`;\n","export const selectContacts = ({ contacts }) => contacts.items;\n\nexport const selectFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","import { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { Label, Input, Emessage } from './ContactForm.styled';\nimport { Button } from '../../shared/utils/Button/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchAddContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(4)\n    .max(40)\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Please enter contact name'),\n  number: yup\n    .string()\n    .min(6)\n    .max(15)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Please enter contact number'),\n});\n\nexport const ContactForm = () => {\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isInContacts = contacts.some(contact => {\n      const existName = contact.name.toLowerCase();\n      const newName = values.name.toLowerCase();\n      return existName === newName;\n    });\n    if (isInContacts) alert(`${values.name} is already in contacts.`);\n    else dispatch(fetchAddContact(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Label>\n            Name\n            <Input type=\"text\" name=\"name\" />\n          </Label>\n          <Emessage component=\"span\" name=\"name\" />\n          <Label>\n            Number\n            <Input type=\"tel\" name=\"number\" />\n          </Label>\n          <Emessage component=\"span\" name=\"number\" />\n          <Button>Add contact</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","export const selectFilter = ({ filter }) => filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/filterSelectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <label>\n      <h2>Contacts</h2>\n      Find contacts by name <input value={filter} onChange={changeFilter} />\n    </label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  margin-bottom: 6px;\n`;\n","import { Button } from '../../shared/utils/Button/Button';\nimport { ListItem } from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/contactsSelectors';\nimport {\n  fetchAllContacts,\n  fetchDeleteContact,\n} from 'redux/contacts/contactsOperations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const list = useSelector(selectFilteredContacts);\n  const isContacts = Boolean(list.length);\n\n  const onContactDelete = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n  return (\n    <div>\n      {isContacts && (\n        <ul>\n          {list.map(({ id, name, number }) => (\n            <ListItem key={id}>\n              {name}: {number}\n              <Button onClick={() => onContactDelete(id)}>Delete</Button>\n            </ListItem>\n          ))}\n        </ul>\n      )}\n      {!isContacts && <p>There are no contacts</p>}\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Label","styled","Input","Field","Emessage","ErrorMessage","selectContacts","contacts","items","selectFilteredContacts","filter","normalizedFilter","toLowerCase","name","includes","schema","yup","shape","min","max","matches","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","some","contact","alert","fetchAddContact","autoComplete","type","component","Button","selectFilter","Filter","value","onChange","e","setFilter","target","ListItem","ContactList","useEffect","fetchAllContacts","list","isContacts","Boolean","length","map","id","onClick","fetchDeleteContact","onContactDelete"],"sourceRoot":""}